// Получаем ссылки на элементы
const yourDick = document.querySelector('.left .dick');
const yourPartnerDick = document.querySelector('.right .dick');
let yourDickPower = 50;
let yourPartnerDickPower = 50;
let fighter1 = {};
let fighter2 = {};

// Функция открытия арены
function openArena(gameInfo) {
    log(gameInfo, 'problem');
    const xpFighter1Node = document.querySelector('#xp-fighter');
    const xpFighter2Node = document.querySelector('#xp-fighter-2');
    if (xpFighter1Node && xpFighter2Node) {
        xpFighter1Node.innerHTML = 30;
        xpFighter2Node.innerHTML = 30;
    }

    fighter1 = gameInfo.connectedPlayers.find((u) => u.id == gameInfo.fighting.activPlayer.id);
    fighter2 = gameInfo.connectedPlayers.find((u) => u.id == gameInfo.fighting.passivPlayer.id);
    log(fighter1, fighter2, 'open arenaaaaaaaa');

    const nameFighter1 = document.querySelector("#name-fighter-1");
    const nameFighter2 = document.querySelector("#name-fighter-2");
    if (nameFighter1 && nameFighter2) {
        nameFighter1.innerHTML = fighter1.username;
        nameFighter2.innerHTML = fighter2.username;
    }

    const myId = localStorage.getItem('socket-id');
    const isSpectator = gameInfo.fighting.activPlayer.id != myId && gameInfo.fighting.passivPlayer.id != myId;

    const fightingScreen = document.querySelector('.fighting-screen');
    const fightingScreenCard = document.querySelector('.fighting-center-card');
    const fightingScreenCardSpectator = document.querySelector('.fighting-center-card-spectator');

    if (isSpectator) {
        if (fightingScreenCardSpectator) fightingScreenCardSpectator.classList.add('spectator');
        if (fightingScreenCard) fightingScreenCard.classList.add('spectator');
    }

    if (fightingScreen) fightingScreen.style.display = 'flex';

    setInterval(() => {
        const rand1 = random(-50, 50);
        const rand2 = random(-50, 50);
        yourDickPower += rand1;
        yourPartnerDickPower += rand2;
        if (yourDickPower < 10) yourDickPower = 10;
        if (yourPartnerDickPower < 10) yourPartnerDickPower = 10;
        if (yourDickPower > 100) yourDickPower = 100;
        if (yourPartnerDickPower > 100) yourPartnerDickPower = 100;

        if (yourDick) yourDick.style.transform = `scale(1,${yourDickPower / 30}) translate(0rem, -5rem)`;
        if (yourPartnerDick) yourPartnerDick.style.transform = `scale(1,${yourPartnerDickPower / 30}) translate(0rem, -5rem)`;
    }, 1000);
}

// Функция начала боя
function fighting(partnerId) {
    user.fightingStepFlag = true;
    clearInterval(setTimer);
    socket.emit('fighting-start', {
        activPlayerId: localStorage.getItem('socket-id'),
        passivPlayerId: partnerId,
    });
}

// Функция получения результата боя
function getFightingResult() {
    const radios = document.querySelectorAll('input[type=radio][name="drone"]');
    const radios2 = document.querySelectorAll('input[type=radio][name="drone2"]');
    const mortalStrike = getSelectedRadioValue(radios);
    const protection = getSelectedRadioValue(radios2);

    return {
        mortalStrike,
        protection,
        yourDickPower,
        yourPartnerDickPower
    };
}

// Функция обработки удара в бою
function combat(element) {
    element.style.display = 'none';
    setTimeout(() => {
        element.style.display = 'block';
    }, Math.round(Math.random() * 4000 + 3000));

    const fightingData = getFightingResult();
    socket.emit('fighting-strike', fightingData);
}

// Слушатели сокетов
socket.on('open-arena', (gameInfo) => {
    openArena(gameInfo);
});

socket.on('open-arena-hit-button', () => {
    const hitButton = document.querySelector('#arena-hit-buttton');
    if (hitButton) hitButton.classList.remove('hide');
});

socket.on('get-fighting-data', (clb) => {
    log('get-fighting-data');
    const fightingData = getFightingResult();
    clb(fightingData);
    resetRadios();
});

function resetRadios() {
    const radios = document.querySelectorAll('input[type=radio][name="drone"]');
    const radios2 = document.querySelectorAll('input[type=radio][name="drone2"]');
    radios.forEach((radio, index) => {
        if (radio) radio.checked = index === 0;
    });
    radios2.forEach((radio, index) => {
        if (radio) radio.checked = index === 0;
    });
}

socket.on('round-done', ({ roundResult, roundId }) => {
    // обработка результата раунда
});

socket.on('start-new-round', () => {
    resetRadios();
});

socket.on('end-of-the-fight', () => {
    const fightingScreen = document.querySelector('.fighting-screen');
    if (fightingScreen) fightingScreen.style.display = 'none';
    if (user.hitPoints <= 0) {
        user.steps = -300;
        setTimeout(() => {
            skip();
        }, 3000);
    }
});
